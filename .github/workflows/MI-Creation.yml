name: Build Packer AMI and GCP Machine Image

on:
  push:
    branches:
      - main

jobs:
  build_images:
    name: Build and Share AMI/Machine Images
    runs-on: ubuntu-latest
    # needs: validate_packer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: npm ci

      - name: Install pkg Globally
        run: npm install -g pkg

      - name: Build Application with pkg
        run: |
          set -e  # Stop if any command fails
          pkg server.js --output infra/packer/dist/webapp --targets node18-linux-x64
          chmod +x infra/packer/dist/webapp
          echo "Build complete! Binary located at infra/packer/dist/webapp"

      - name: Debug Build Output
        run: ls -lah infra/packer/dist/

      # AWS DEV Configuration
      - name: Configure AWS DEV Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
          aws-region: us-east-1

      # Setup GCP DEV credentials from JSON
      - name: Setup GCP DEV Credentials
        id: setup-gcp-dev
        run: |
          echo '${{ secrets.DEV_GCP_KEY }}' > gcp-dev-credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

      # Setup GCP DEMO credentials for sharing
      - name: Setup GCP DEMO Project Info
        id: setup-gcp-demo
        run: |
          echo '${{ secrets.DEMO_GCP_KEY }}' > gcp-demo-credentials.json
          cp gcp-demo-credentials.json infra/packer/gcp-demo-credentials.json
          echo "GCP_DEMO_PROJECT_ID=$(echo '${{ secrets.DEMO_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

      # Debug variables
      - name: Debug environment variables
        run: |
          echo "GCP_PROJECT_ID: ${GCP_PROJECT_ID}"
          echo "GCP_DEMO_PROJECT_ID: ${GCP_DEMO_PROJECT_ID}"
          echo "GCP_DEMO_SERVICE_ACCOUNT: ${GCP_DEMO_SERVICE_ACCOUNT}"

      # Setup AWS DEMO Account ID for sharing
      - name: Configure AWS DEMO Account
        id: setup-aws-demo
        run: |
          # Temporarily use DEMO credentials to get account ID
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          # Get account ID and set as environment variable
          DEMO_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "DEMO_ACCOUNT_ID=${DEMO_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "DEMO_ACCOUNT_ID: ${DEMO_ACCOUNT_ID}"
          
          # Switch back to DEV credentials for building
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

      # Install and authenticate gcloud CLI with DEV credentials
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.DEV_GCP_KEY }}
          export_default_credentials: true

      - name: Authenticate User for GCP
        id: authenticate-gcp-user
        run: |
          # Extract client_email from the JSON credentials
          GCP_DEV_EMAIL=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.client_email')

          # Authenticate the service account
          gcloud auth activate-service-account --key-file="gcp-dev-credentials.json"

          # Set the active account
          gcloud config set account ${GCP_DEV_EMAIL}

          # Export the email to the environment for later use
          echo "GCP_DEV_EMAIL=${GCP_DEV_EMAIL}" >> $GITHUB_ENV

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Initialize Packer
        working-directory: infra/packer
        run: packer init .

      - name: Build AMI and Machine Images
        working-directory: infra/packer
        run: |
          packer build \
            -var "target_account_id=${DEMO_ACCOUNT_ID}" \
            -var "cloud_gcp_source_project=${GCP_PROJECT_ID}" \
            -var "cloud_gcp_target_project=${GCP_DEMO_PROJECT_ID}" \
            machine-image.pkr.hcl

      - name: Verify AWS AMI Creation
        run: |
          echo "Verifying AWS AMI creation..."
          # Get the latest AMI ID and store it as an environment variable
          LATEST_AMI_ID=$(aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output text --filters "Name=name,Values=custom-nodejs-mysql-*" | sort -k3 -r | head -n 1 | awk '{print $1}')
          echo "LATEST_AMI_ID=${LATEST_AMI_ID}" >> $GITHUB_ENV
          
          # Display AMIs for verification
          aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output table --filters "Name=name,Values=custom-nodejs-mysql-*" | head -n 10
          
          echo "Latest AMI ID: ${LATEST_AMI_ID}"
      
      - name: Verify GCP Machine Image Creation
        run: |
          echo "Verifying GCP Machine Image creation..."
          gcloud compute images list --project=${GCP_PROJECT_ID} --filter="name:custom-nodejs-mysql" --limit=5

      # Run the preami.sh script before Terraform
      - name: Run preami.sh with Latest AMI ID
        working-directory: infra/terraform/aws
        run: |
          # Make sure the script is executable
          chmod +x preami.sh
          
          # Set environment variables for the script
          export DEV_AWS_ACCESS_KEY='${{ secrets.DEV_AWS_ACCESS_KEY }}'
          export DEV_AWS_SECRET_KEY='${{ secrets.DEV_AWS_SECRET_KEY }}'
          export DEMO_AWS_ACCESS_KEY='${{ secrets.DEMO_AWS_ACCESS_KEY }}'
          export DEMO_AWS_SECRET_KEY='${{ secrets.DEMO_AWS_SECRET_KEY }}'
          
          # Run the script with the latest AMI ID
          ./preami.sh ${LATEST_AMI_ID}

      # Setup Terraform for AMI migration
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # Initialize and Apply Terraform using existing file
      - name: Run Terraform to Migrate AMI
        working-directory: infra/terraform/aws
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="source_ami_id=${LATEST_AMI_ID}" \
            -var="source_aws_access_key=${{ secrets.DEV_AWS_ACCESS_KEY }}" \
            -var="source_aws_secret_key=${{ secrets.DEV_AWS_SECRET_KEY }}" \
            -var="target_aws_access_key=${{ secrets.DEMO_AWS_ACCESS_KEY }}" \
            -var="target_aws_secret_key=${{ secrets.DEMO_AWS_SECRET_KEY }}" \
            -var="aws_region=us-east-1"

      # Verify the AMI was copied successfully
      - name: Verify AMI Copy in DEMO Account
        run: |
          echo "Verifying AMI copy in DEMO account..."
          
          # Temporarily use DEMO credentials to verify
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output table | head -n 10
        
            # Run the GCP migration script after GCP Machine Image is verified
      ####
      # - name: Migrate GCP Machine Image to DEMO Project
      #   run: |
      #     echo "Running GCP migration script..."
          
      #     # Make the script executable
      #     chmod +x infra/packer/gcp_migration.sh
          
      #     # Run the script with zone parameter
      #     ./infra/packer/gcp_migration.sh us-east1-b
          
      #     # Verify the machine image in the DEMO project
      #     echo "Verifying Machine Image in DEMO project..."
          
      #     # Temporarily authenticate with DEMO credentials to verify
      #     gcloud auth activate-service-account --key-file="gcp-demo-credentials.json"
      #     gcloud config set project ${GCP_DEMO_PROJECT_ID}
          
      #     gcloud compute images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:copy-custom-nodejs-mysql" --limit=5
      #     gcloud compute machine-images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:mi-demo-custom-nodejs-mysql" --limit=5

      # Set up Terraform for GCP migration
      - name: Setup Terraform for GCP
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # Prepare GCP Migration
      - name: Prepare GCP Migration
        run: |
          echo '${{ secrets.DEV_GCP_KEY }}' > gcp-dev-credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV
          echo '${{ secrets.DEMO_GCP_KEY }}' > gcp-demo-credentials.json
          echo "GCP_DEMO_PROJECT_ID=$(echo '${{ secrets.DEMO_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

          cp gcp-demo-credentials.json infra/terraform/gcp/gcp-demo-credentials.json
          cp gcp-dev-credentials.json infra/terraform/gcp/gcp-dev-credentials.json

          echo "Running GCP migration script..."
          
          # Make the preparation script executable
          chmod +x infra/terraform/gcp/prepare-gcp-migration.sh
          
          # Run the script with zone parameter
          cd infra/terraform/gcp
          ./prepare-gcp-migration.sh us-east1-b

      # Run Terraform for GCP Migration
      - name: Run Terraform for GCP Migration
        working-directory: infra/terraform/gcp
        run: |
          terraform init
          terraform apply -auto-approve -var-file=gcp_migration.tfvars
          
      # Verify the machine images
      - name: Verify GCP Machine Images
        run: |
          # Verify the machine images in both projects
          echo "Verifying Machine Images..."
          
          # Verify in DEV project
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud config set project $GCP_PROJECT_ID
          gcloud compute machine-images list --project=$GCP_PROJECT_ID --filter="name~'mi-custom-nodejs-mysql'" --limit=5
          
          # Verify in DEMO project
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-demo-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEMO_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud config set project $GCP_PROJECT_ID
          gcloud compute machine-images list --project=$GCP_PROJECT_ID --filter="name~'mi-demo-custom-nodejs-mysql'" --limit=5

      # Clean up credentials after build
      - name: Clean Up Credentials
        if: always()
        run: |
          rm -f gcp-dev-credentials.json gcp-demo-credentials.json